# coding: utf-8

"""
    Dkube api server

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class JobModelParametersGenerated(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accelerator': 'str',
        'affinity': 'str',
        'archived': 'bool',
        'best_objective_value': 'float',
        'best_trial_id': 'str',
        'category': 'str',
        'cicdstatus': 'CICDStatusModel',
        'deleted': 'bool',
        'details': 'JobModelParametersGeneratedDetails',
        'hp_tuning_info': 'str',
        'input_datum_refs': 'list[JobModelParametersGeneratedInputDatumRefs]',
        'jobid': 'str',
        'ngpus_alloc': 'int',
        'ngpus_max': 'int',
        'pipeline': 'DatumJobDetailsPipeline',
        'private': 'str',
        'runtime': 'TimeStamps',
        'scheduled': 'bool',
        'serving_image': 'CustomContainerModel',
        'status': 'JobStatusModel',
        'studyref': 'str',
        'subclass': 'str',
        'tbref': 'str',
        'timestamps': 'TimeStamps',
        'tracking': 'list[str]',
        'training_image': 'CustomContainerModel',
        'trialref': 'str',
        'user': 'str',
        'uuid': 'str',
        'versions': 'JobModelParametersGeneratedVersions'
    }

    attribute_map = {
        'accelerator': 'accelerator',
        'affinity': 'affinity',
        'archived': 'archived',
        'best_objective_value': 'best_objective_value',
        'best_trial_id': 'best_trial_id',
        'category': 'category',
        'cicdstatus': 'cicdstatus',
        'deleted': 'deleted',
        'details': 'details',
        'hp_tuning_info': 'hp_tuning_info',
        'input_datum_refs': 'inputDatumRefs',
        'jobid': 'jobid',
        'ngpus_alloc': 'ngpus_alloc',
        'ngpus_max': 'ngpus_max',
        'pipeline': 'pipeline',
        'private': 'private',
        'runtime': 'runtime',
        'scheduled': 'scheduled',
        'serving_image': 'serving_image',
        'status': 'status',
        'studyref': 'studyref',
        'subclass': 'subclass',
        'tbref': 'tbref',
        'timestamps': 'timestamps',
        'tracking': 'tracking',
        'training_image': 'training_image',
        'trialref': 'trialref',
        'user': 'user',
        'uuid': 'uuid',
        'versions': 'versions'
    }

    def __init__(self, accelerator=None, affinity=None, archived=False, best_objective_value=None, best_trial_id=None, category=None, cicdstatus=None, deleted=False, details=None, hp_tuning_info=None, input_datum_refs=None, jobid=None, ngpus_alloc=None, ngpus_max=None, pipeline=None, private=None, runtime=None, scheduled=None, serving_image=None, status=None, studyref=None, subclass=None, tbref=None, timestamps=None, tracking=None, training_image=None, trialref=None, user=None, uuid=None, versions=None):  # noqa: E501
        """JobModelParametersGenerated - a model defined in Swagger"""  # noqa: E501

        self._accelerator = None
        self._affinity = None
        self._archived = None
        self._best_objective_value = None
        self._best_trial_id = None
        self._category = None
        self._cicdstatus = None
        self._deleted = None
        self._details = None
        self._hp_tuning_info = None
        self._input_datum_refs = None
        self._jobid = None
        self._ngpus_alloc = None
        self._ngpus_max = None
        self._pipeline = None
        self._private = None
        self._runtime = None
        self._scheduled = None
        self._serving_image = None
        self._status = None
        self._studyref = None
        self._subclass = None
        self._tbref = None
        self._timestamps = None
        self._tracking = None
        self._training_image = None
        self._trialref = None
        self._user = None
        self._uuid = None
        self._versions = None
        self.discriminator = None

        if accelerator is not None:
            self.accelerator = accelerator
        if affinity is not None:
            self.affinity = affinity
        if archived is not None:
            self.archived = archived
        if best_objective_value is not None:
            self.best_objective_value = best_objective_value
        if best_trial_id is not None:
            self.best_trial_id = best_trial_id
        if category is not None:
            self.category = category
        if cicdstatus is not None:
            self.cicdstatus = cicdstatus
        if deleted is not None:
            self.deleted = deleted
        if details is not None:
            self.details = details
        if hp_tuning_info is not None:
            self.hp_tuning_info = hp_tuning_info
        if input_datum_refs is not None:
            self.input_datum_refs = input_datum_refs
        if jobid is not None:
            self.jobid = jobid
        if ngpus_alloc is not None:
            self.ngpus_alloc = ngpus_alloc
        if ngpus_max is not None:
            self.ngpus_max = ngpus_max
        if pipeline is not None:
            self.pipeline = pipeline
        if private is not None:
            self.private = private
        if runtime is not None:
            self.runtime = runtime
        if scheduled is not None:
            self.scheduled = scheduled
        if serving_image is not None:
            self.serving_image = serving_image
        if status is not None:
            self.status = status
        if studyref is not None:
            self.studyref = studyref
        if subclass is not None:
            self.subclass = subclass
        if tbref is not None:
            self.tbref = tbref
        if timestamps is not None:
            self.timestamps = timestamps
        if tracking is not None:
            self.tracking = tracking
        if training_image is not None:
            self.training_image = training_image
        if trialref is not None:
            self.trialref = trialref
        if user is not None:
            self.user = user
        if uuid is not None:
            self.uuid = uuid
        if versions is not None:
            self.versions = versions

    @property
    def accelerator(self):
        """Gets the accelerator of this JobModelParametersGenerated.  # noqa: E501

        Node affinity  # noqa: E501

        :return: The accelerator of this JobModelParametersGenerated.  # noqa: E501
        :rtype: str
        """
        return self._accelerator

    @accelerator.setter
    def accelerator(self, accelerator):
        """Sets the accelerator of this JobModelParametersGenerated.

        Node affinity  # noqa: E501

        :param accelerator: The accelerator of this JobModelParametersGenerated.  # noqa: E501
        :type: str
        """

        self._accelerator = accelerator

    @property
    def affinity(self):
        """Gets the affinity of this JobModelParametersGenerated.  # noqa: E501

        Affinity of this job.  # noqa: E501

        :return: The affinity of this JobModelParametersGenerated.  # noqa: E501
        :rtype: str
        """
        return self._affinity

    @affinity.setter
    def affinity(self, affinity):
        """Sets the affinity of this JobModelParametersGenerated.

        Affinity of this job.  # noqa: E501

        :param affinity: The affinity of this JobModelParametersGenerated.  # noqa: E501
        :type: str
        """

        self._affinity = affinity

    @property
    def archived(self):
        """Gets the archived of this JobModelParametersGenerated.  # noqa: E501


        :return: The archived of this JobModelParametersGenerated.  # noqa: E501
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this JobModelParametersGenerated.


        :param archived: The archived of this JobModelParametersGenerated.  # noqa: E501
        :type: bool
        """

        self._archived = archived

    @property
    def best_objective_value(self):
        """Gets the best_objective_value of this JobModelParametersGenerated.  # noqa: E501

        Objective value of best studyjob trial  # noqa: E501

        :return: The best_objective_value of this JobModelParametersGenerated.  # noqa: E501
        :rtype: float
        """
        return self._best_objective_value

    @best_objective_value.setter
    def best_objective_value(self, best_objective_value):
        """Sets the best_objective_value of this JobModelParametersGenerated.

        Objective value of best studyjob trial  # noqa: E501

        :param best_objective_value: The best_objective_value of this JobModelParametersGenerated.  # noqa: E501
        :type: float
        """

        self._best_objective_value = best_objective_value

    @property
    def best_trial_id(self):
        """Gets the best_trial_id of this JobModelParametersGenerated.  # noqa: E501

        Unique id of best studyjob trial  # noqa: E501

        :return: The best_trial_id of this JobModelParametersGenerated.  # noqa: E501
        :rtype: str
        """
        return self._best_trial_id

    @best_trial_id.setter
    def best_trial_id(self, best_trial_id):
        """Sets the best_trial_id of this JobModelParametersGenerated.

        Unique id of best studyjob trial  # noqa: E501

        :param best_trial_id: The best_trial_id of this JobModelParametersGenerated.  # noqa: E501
        :type: str
        """

        self._best_trial_id = best_trial_id

    @property
    def category(self):
        """Gets the category of this JobModelParametersGenerated.  # noqa: E501


        :return: The category of this JobModelParametersGenerated.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this JobModelParametersGenerated.


        :param category: The category of this JobModelParametersGenerated.  # noqa: E501
        :type: str
        """
        allowed_values = ["template", "run"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"  # noqa: E501
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def cicdstatus(self):
        """Gets the cicdstatus of this JobModelParametersGenerated.  # noqa: E501


        :return: The cicdstatus of this JobModelParametersGenerated.  # noqa: E501
        :rtype: CICDStatusModel
        """
        return self._cicdstatus

    @cicdstatus.setter
    def cicdstatus(self, cicdstatus):
        """Sets the cicdstatus of this JobModelParametersGenerated.


        :param cicdstatus: The cicdstatus of this JobModelParametersGenerated.  # noqa: E501
        :type: CICDStatusModel
        """

        self._cicdstatus = cicdstatus

    @property
    def deleted(self):
        """Gets the deleted of this JobModelParametersGenerated.  # noqa: E501


        :return: The deleted of this JobModelParametersGenerated.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this JobModelParametersGenerated.


        :param deleted: The deleted of this JobModelParametersGenerated.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def details(self):
        """Gets the details of this JobModelParametersGenerated.  # noqa: E501


        :return: The details of this JobModelParametersGenerated.  # noqa: E501
        :rtype: JobModelParametersGeneratedDetails
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this JobModelParametersGenerated.


        :param details: The details of this JobModelParametersGenerated.  # noqa: E501
        :type: JobModelParametersGeneratedDetails
        """

        self._details = details

    @property
    def hp_tuning_info(self):
        """Gets the hp_tuning_info of this JobModelParametersGenerated.  # noqa: E501

        Tuning hyperparam json string  # noqa: E501

        :return: The hp_tuning_info of this JobModelParametersGenerated.  # noqa: E501
        :rtype: str
        """
        return self._hp_tuning_info

    @hp_tuning_info.setter
    def hp_tuning_info(self, hp_tuning_info):
        """Sets the hp_tuning_info of this JobModelParametersGenerated.

        Tuning hyperparam json string  # noqa: E501

        :param hp_tuning_info: The hp_tuning_info of this JobModelParametersGenerated.  # noqa: E501
        :type: str
        """

        self._hp_tuning_info = hp_tuning_info

    @property
    def input_datum_refs(self):
        """Gets the input_datum_refs of this JobModelParametersGenerated.  # noqa: E501


        :return: The input_datum_refs of this JobModelParametersGenerated.  # noqa: E501
        :rtype: list[JobModelParametersGeneratedInputDatumRefs]
        """
        return self._input_datum_refs

    @input_datum_refs.setter
    def input_datum_refs(self, input_datum_refs):
        """Sets the input_datum_refs of this JobModelParametersGenerated.


        :param input_datum_refs: The input_datum_refs of this JobModelParametersGenerated.  # noqa: E501
        :type: list[JobModelParametersGeneratedInputDatumRefs]
        """

        self._input_datum_refs = input_datum_refs

    @property
    def jobid(self):
        """Gets the jobid of this JobModelParametersGenerated.  # noqa: E501

        6Char alphanumeric ID unique per user  # noqa: E501

        :return: The jobid of this JobModelParametersGenerated.  # noqa: E501
        :rtype: str
        """
        return self._jobid

    @jobid.setter
    def jobid(self, jobid):
        """Sets the jobid of this JobModelParametersGenerated.

        6Char alphanumeric ID unique per user  # noqa: E501

        :param jobid: The jobid of this JobModelParametersGenerated.  # noqa: E501
        :type: str
        """

        self._jobid = jobid

    @property
    def ngpus_alloc(self):
        """Gets the ngpus_alloc of this JobModelParametersGenerated.  # noqa: E501

        Actual number of gpus allocated to this job, will determined when jobs get to running  # noqa: E501

        :return: The ngpus_alloc of this JobModelParametersGenerated.  # noqa: E501
        :rtype: int
        """
        return self._ngpus_alloc

    @ngpus_alloc.setter
    def ngpus_alloc(self, ngpus_alloc):
        """Sets the ngpus_alloc of this JobModelParametersGenerated.

        Actual number of gpus allocated to this job, will determined when jobs get to running  # noqa: E501

        :param ngpus_alloc: The ngpus_alloc of this JobModelParametersGenerated.  # noqa: E501
        :type: int
        """

        self._ngpus_alloc = ngpus_alloc

    @property
    def ngpus_max(self):
        """Gets the ngpus_max of this JobModelParametersGenerated.  # noqa: E501

        Max number of gpus this job could get allocated with.  # noqa: E501

        :return: The ngpus_max of this JobModelParametersGenerated.  # noqa: E501
        :rtype: int
        """
        return self._ngpus_max

    @ngpus_max.setter
    def ngpus_max(self, ngpus_max):
        """Sets the ngpus_max of this JobModelParametersGenerated.

        Max number of gpus this job could get allocated with.  # noqa: E501

        :param ngpus_max: The ngpus_max of this JobModelParametersGenerated.  # noqa: E501
        :type: int
        """

        self._ngpus_max = ngpus_max

    @property
    def pipeline(self):
        """Gets the pipeline of this JobModelParametersGenerated.  # noqa: E501


        :return: The pipeline of this JobModelParametersGenerated.  # noqa: E501
        :rtype: DatumJobDetailsPipeline
        """
        return self._pipeline

    @pipeline.setter
    def pipeline(self, pipeline):
        """Sets the pipeline of this JobModelParametersGenerated.


        :param pipeline: The pipeline of this JobModelParametersGenerated.  # noqa: E501
        :type: DatumJobDetailsPipeline
        """

        self._pipeline = pipeline

    @property
    def private(self):
        """Gets the private of this JobModelParametersGenerated.  # noqa: E501


        :return: The private of this JobModelParametersGenerated.  # noqa: E501
        :rtype: str
        """
        return self._private

    @private.setter
    def private(self, private):
        """Sets the private of this JobModelParametersGenerated.


        :param private: The private of this JobModelParametersGenerated.  # noqa: E501
        :type: str
        """

        self._private = private

    @property
    def runtime(self):
        """Gets the runtime of this JobModelParametersGenerated.  # noqa: E501


        :return: The runtime of this JobModelParametersGenerated.  # noqa: E501
        :rtype: TimeStamps
        """
        return self._runtime

    @runtime.setter
    def runtime(self, runtime):
        """Sets the runtime of this JobModelParametersGenerated.


        :param runtime: The runtime of this JobModelParametersGenerated.  # noqa: E501
        :type: TimeStamps
        """

        self._runtime = runtime

    @property
    def scheduled(self):
        """Gets the scheduled of this JobModelParametersGenerated.  # noqa: E501

        identifing job scheduled or not  # noqa: E501

        :return: The scheduled of this JobModelParametersGenerated.  # noqa: E501
        :rtype: bool
        """
        return self._scheduled

    @scheduled.setter
    def scheduled(self, scheduled):
        """Sets the scheduled of this JobModelParametersGenerated.

        identifing job scheduled or not  # noqa: E501

        :param scheduled: The scheduled of this JobModelParametersGenerated.  # noqa: E501
        :type: bool
        """

        self._scheduled = scheduled

    @property
    def serving_image(self):
        """Gets the serving_image of this JobModelParametersGenerated.  # noqa: E501


        :return: The serving_image of this JobModelParametersGenerated.  # noqa: E501
        :rtype: CustomContainerModel
        """
        return self._serving_image

    @serving_image.setter
    def serving_image(self, serving_image):
        """Sets the serving_image of this JobModelParametersGenerated.


        :param serving_image: The serving_image of this JobModelParametersGenerated.  # noqa: E501
        :type: CustomContainerModel
        """

        self._serving_image = serving_image

    @property
    def status(self):
        """Gets the status of this JobModelParametersGenerated.  # noqa: E501


        :return: The status of this JobModelParametersGenerated.  # noqa: E501
        :rtype: JobStatusModel
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this JobModelParametersGenerated.


        :param status: The status of this JobModelParametersGenerated.  # noqa: E501
        :type: JobStatusModel
        """

        self._status = status

    @property
    def studyref(self):
        """Gets the studyref of this JobModelParametersGenerated.  # noqa: E501

        Unique id of study job  # noqa: E501

        :return: The studyref of this JobModelParametersGenerated.  # noqa: E501
        :rtype: str
        """
        return self._studyref

    @studyref.setter
    def studyref(self, studyref):
        """Sets the studyref of this JobModelParametersGenerated.

        Unique id of study job  # noqa: E501

        :param studyref: The studyref of this JobModelParametersGenerated.  # noqa: E501
        :type: str
        """

        self._studyref = studyref

    @property
    def subclass(self):
        """Gets the subclass of this JobModelParametersGenerated.  # noqa: E501


        :return: The subclass of this JobModelParametersGenerated.  # noqa: E501
        :rtype: str
        """
        return self._subclass

    @subclass.setter
    def subclass(self, subclass):
        """Sets the subclass of this JobModelParametersGenerated.


        :param subclass: The subclass of this JobModelParametersGenerated.  # noqa: E501
        :type: str
        """
        allowed_values = ["training", "inference", "notebook", "rstudio", "study", "studytrial", "dkube"]  # noqa: E501
        if subclass not in allowed_values:
            raise ValueError(
                "Invalid value for `subclass` ({0}), must be one of {1}"  # noqa: E501
                .format(subclass, allowed_values)
            )

        self._subclass = subclass

    @property
    def tbref(self):
        """Gets the tbref of this JobModelParametersGenerated.  # noqa: E501

        UUID of TB resouruce  # noqa: E501

        :return: The tbref of this JobModelParametersGenerated.  # noqa: E501
        :rtype: str
        """
        return self._tbref

    @tbref.setter
    def tbref(self, tbref):
        """Sets the tbref of this JobModelParametersGenerated.

        UUID of TB resouruce  # noqa: E501

        :param tbref: The tbref of this JobModelParametersGenerated.  # noqa: E501
        :type: str
        """

        self._tbref = tbref

    @property
    def timestamps(self):
        """Gets the timestamps of this JobModelParametersGenerated.  # noqa: E501


        :return: The timestamps of this JobModelParametersGenerated.  # noqa: E501
        :rtype: TimeStamps
        """
        return self._timestamps

    @timestamps.setter
    def timestamps(self, timestamps):
        """Sets the timestamps of this JobModelParametersGenerated.


        :param timestamps: The timestamps of this JobModelParametersGenerated.  # noqa: E501
        :type: TimeStamps
        """

        self._timestamps = timestamps

    @property
    def tracking(self):
        """Gets the tracking of this JobModelParametersGenerated.  # noqa: E501


        :return: The tracking of this JobModelParametersGenerated.  # noqa: E501
        :rtype: list[str]
        """
        return self._tracking

    @tracking.setter
    def tracking(self, tracking):
        """Sets the tracking of this JobModelParametersGenerated.


        :param tracking: The tracking of this JobModelParametersGenerated.  # noqa: E501
        :type: list[str]
        """

        self._tracking = tracking

    @property
    def training_image(self):
        """Gets the training_image of this JobModelParametersGenerated.  # noqa: E501


        :return: The training_image of this JobModelParametersGenerated.  # noqa: E501
        :rtype: CustomContainerModel
        """
        return self._training_image

    @training_image.setter
    def training_image(self, training_image):
        """Sets the training_image of this JobModelParametersGenerated.


        :param training_image: The training_image of this JobModelParametersGenerated.  # noqa: E501
        :type: CustomContainerModel
        """

        self._training_image = training_image

    @property
    def trialref(self):
        """Gets the trialref of this JobModelParametersGenerated.  # noqa: E501

        Unique id of a studyjob trial  # noqa: E501

        :return: The trialref of this JobModelParametersGenerated.  # noqa: E501
        :rtype: str
        """
        return self._trialref

    @trialref.setter
    def trialref(self, trialref):
        """Sets the trialref of this JobModelParametersGenerated.

        Unique id of a studyjob trial  # noqa: E501

        :param trialref: The trialref of this JobModelParametersGenerated.  # noqa: E501
        :type: str
        """

        self._trialref = trialref

    @property
    def user(self):
        """Gets the user of this JobModelParametersGenerated.  # noqa: E501

        user to which this job belongs  # noqa: E501

        :return: The user of this JobModelParametersGenerated.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this JobModelParametersGenerated.

        user to which this job belongs  # noqa: E501

        :param user: The user of this JobModelParametersGenerated.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def uuid(self):
        """Gets the uuid of this JobModelParametersGenerated.  # noqa: E501


        :return: The uuid of this JobModelParametersGenerated.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this JobModelParametersGenerated.


        :param uuid: The uuid of this JobModelParametersGenerated.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def versions(self):
        """Gets the versions of this JobModelParametersGenerated.  # noqa: E501


        :return: The versions of this JobModelParametersGenerated.  # noqa: E501
        :rtype: JobModelParametersGeneratedVersions
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this JobModelParametersGenerated.


        :param versions: The versions of this JobModelParametersGenerated.  # noqa: E501
        :type: JobModelParametersGeneratedVersions
        """

        self._versions = versions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobModelParametersGenerated, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobModelParametersGenerated):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
