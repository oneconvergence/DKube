# coding: utf-8

"""
    Dkube api server

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UserCollectionJobsInferences(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'completed': 'list[JobCollection]',
        'failed': 'list[JobCollection]',
        'running': 'list[JobCollection]'
    }

    attribute_map = {
        'completed': 'completed',
        'failed': 'failed',
        'running': 'running'
    }

    def __init__(self, completed=None, failed=None, running=None):  # noqa: E501
        """UserCollectionJobsInferences - a model defined in Swagger"""  # noqa: E501

        self._completed = None
        self._failed = None
        self._running = None
        self.discriminator = None

        if completed is not None:
            self.completed = completed
        if failed is not None:
            self.failed = failed
        if running is not None:
            self.running = running

    @property
    def completed(self):
        """Gets the completed of this UserCollectionJobsInferences.  # noqa: E501


        :return: The completed of this UserCollectionJobsInferences.  # noqa: E501
        :rtype: list[JobCollection]
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this UserCollectionJobsInferences.


        :param completed: The completed of this UserCollectionJobsInferences.  # noqa: E501
        :type: list[JobCollection]
        """

        self._completed = completed

    @property
    def failed(self):
        """Gets the failed of this UserCollectionJobsInferences.  # noqa: E501


        :return: The failed of this UserCollectionJobsInferences.  # noqa: E501
        :rtype: list[JobCollection]
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """Sets the failed of this UserCollectionJobsInferences.


        :param failed: The failed of this UserCollectionJobsInferences.  # noqa: E501
        :type: list[JobCollection]
        """

        self._failed = failed

    @property
    def running(self):
        """Gets the running of this UserCollectionJobsInferences.  # noqa: E501


        :return: The running of this UserCollectionJobsInferences.  # noqa: E501
        :rtype: list[JobCollection]
        """
        return self._running

    @running.setter
    def running(self, running):
        """Sets the running of this UserCollectionJobsInferences.


        :param running: The running of this UserCollectionJobsInferences.  # noqa: E501
        :type: list[JobCollection]
        """

        self._running = running

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserCollectionJobsInferences, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserCollectionJobsInferences):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
